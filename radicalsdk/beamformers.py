# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06_beamformers.ipynb (unless otherwise specified).

__all__ = ['cov_matrix', 'forward_backward_avg', 'aoa_capon']

# Cell
import tensorflow as tf
import tensorflow.linalg as linalg

# Cell

def cov_matrix(x):
    """Computes the covariance matrix on signal x"""
    n_chirps = x.shape[-1]
    Rxx = tf.matmul(x, x, adjoint_b=True)
    return Rxx/n_chirps

def forward_backward_avg(Rxx):
    """Backward forward averaging"""
    num_rx = Rxx.shape[-1]

    J = tf.reverse(tf.eye(num_rx, dtype=Rxx.dtype), [-1])

    R_fb = 0.5 * (Rxx + tf.matmul(
        J, tf.matmul(tf.math.conj(Rxx), J)))

    return R_fb

def aoa_capon(x, steering_vec, mu = 1e-7, bottom_center=True):
    """Tensorflow implementation of Capon AoA estimatation"""
    num_rx = x.shape[-2]
    Rxx = cov_matrix(x)
    Rxx = forward_backward_avg(Rxx)

    if mu is not None:
        uI = tf.eye(num_rx, dtype=x.dtype) * mu
        Rxx_inv = linalg.inv(Rxx+uI)
    else:
        Rxx_inv = linalg.inv(Rxx)
    Rxx_inv_a = tf.matmul(Rxx_inv, steering_vec, transpose_b=True)

    den = tf.math.reciprocal_no_nan(
        tf.einsum('ij,...ji->...i', tf.math.conj(steering_vec), Rxx_inv_a)
    )
    weights = tf.einsum('bij,bj->bi', Rxx_inv_a, den)

    return den, weights